package common;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.sql.DataSource;

public class DBConnPool {
	public Connection con;
	public Statement stmt;
	public PreparedStatement psmt;
	public ResultSet rs;
	
	/*
	 JNDI(Java Naming and Directory Interface)
	 : 디렉토리 서비스에서 제공하는 데이터 및 객체를 찾아서 참조(LookUp)하는 API로,
	 쉽게말하면 외부에 있는 객체를 이름으로 찾아오기 위한 기술
	 
	 DBCP(DataBase Connection Pool : 커넥션풀)
	 :DB와 연결된 커넥션 인스턴스를 미리 만들어 풀에 저장해두었다가
	 필요할때 가져다 쓰고 반납하는 기술을 말한다.
	 DB의 부하를 줄이고 자원을 효율적으로 관리할 수 있다.(워터파크 유수풀 튜브와 비슷)
	 */	
	public DBConnPool() {
		try {
			Context initCtx = new InitialContext();
			Context ctx = (Context)initCtx.lookup("java:comp/env");
			DataSource source = (DataSource)ctx.lookup("dbcp_myoracle");
			con = source.getConnection();
			System.out.println("DB 커넥션 풀 연결 성공");
	
		}
		catch(Exception e) {
			System.out.println("DB 커넥션 풀 연결 실패");
			e.printStackTrace();
		}
	}
	
	public void close() {
		try {
			if(rs!=null) rs.close();
			if(stmt!=null) stmt.close();
			if(psmt!=null) psmt.close();
			if(con!=null) con.close();
			System.out.println("DB 커넥션 풀 자원반납");
		}
		catch(Exception e){
			e.printStackTrace();
		}
	}

}
